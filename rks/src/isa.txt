Key:
val = Immediate Value
reg = Register ID
label = Label Defined by User

Registers:
0 - A (16 bit)
1 - B (16 bit)
2 - C (16 bit)
3 - D (16 bit)
4 - AO #ALU Output (16 bit)
5 - F #Flags (4 bit)
6 - PC #Program Counter (16 bit)
7 - SP #Stack Pointer (16 bit)

Flags:
Zero
Negative
Overflow

=====================================================================================================================

0 - NOP
1 - LDA <val> #Load <val> into register A
2 - LDB <val> #Load <val> into register B
3 - LDC <val> #Load <val> into register C
4 - LDD <val> #Load <val> into register D
5 - SWP <reg1> <reg2> #Swaps the value in <reg1> and <reg2>
6 - MOV <reg1> <reg2> #Move the value in <reg1> to <reg2> (overwrites the contents of <reg2> and sets <reg1> to 0)
7 - STA <reg> #Store register A's contents at the RAM address stored in <reg>
8 - STB <reg> #Store register B's contents at the RAM address stored in <reg>
9 - STC <reg> #Store register C's contents at the RAM address stored in <reg>
10 - STD <reg> #Store register D's contents at the RAM address stored in <reg>
11 - STAO <reg> #Store register AO's contents at the RAM address stored in <reg>
12 - LRA <reg> #Loads the contents of the RAM address stored in <reg> into register A
13 - LRB <reg> #Loads the contents of the RAM address stored in <reg> into register B
14 - LRC <reg> #Loads the contents of the RAM address stored in <reg> into register C
15 - LRD <reg> #Loads the contents of the RAM address stored in <reg> into register D
16 - PSH <reg> #Pushes the contents of <reg> onto the stack
17 - PUL <reg> #Loads the value at the stack pointer into <reg>
18 - ADD #Adds register A and B together and stores the result in register AO
19 - SUB #Subtracts register B from A and stores the result in register AO
20 - MUL #Multiplies register A and B together and stores the result in register AO
21 - DIV #Divides register A by B and stores the result in register AO
22 - AND #ANDs register A and B and stores the result in register AO
23 - OR #ORs register A and B and stores the result in register AO
24 - NOR #NORs register A and B and stores the result in register AO
25 - XOR #XORs register A and B and stores the result in register AO
26 - NOT #Runs register A through a NOT gate and stores the result in register AO
27 - CMP <reg1> <reg2> #Subtracts the contents of <reg2> from <reg1>; updates flags accordingly
28 - JZ <label> #Jump to <label> if the Zero flag is 1
29 - JN <label> #Jump to <label> if the Negative flag is 1
30 - JO <label> #Jump to <label> if the Overflow flag is 1